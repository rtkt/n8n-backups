{
  "id": 3,
  "name": "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Notion",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "id": "1b12ef44-1cc4-4a3b-9cbc-60532bbeb405",
      "name": "–ù–∞—á–∞–ª–æ (–æ–Ω –∂–µ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -500,
        -100
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "apiVersion",
              "value": "2022-06-28"
            },
            {
              "name": "strings.lastExec",
              "value": "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
            },
            {
              "name": "strings.frequency",
              "value": "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å"
            },
            {
              "name": "dbs.templates",
              "value": "9bfcafdd2c044073924eb32bfa7671d9"
            },
            {
              "name": "dbs.tasklist",
              "value": "cf149754de194c6cbe23a1eb821c30ca"
            },
            {
              "name": "strings.plannedTime",
              "value": "–í—Ä–µ–º—è"
            },
            {
              "name": "strings.taskName",
              "value": "–ò–º—è –∑–∞–¥–∞—á–∏"
            },
            {
              "name": "strings.effort",
              "value": "–£—Å–∏–ª–∏–µ"
            },
            {
              "name": "strings.value",
              "value": "–ó–Ω–∞—á–µ–Ω–∏–µ"
            },
            {
              "name": "strings.project",
              "value": "–ü—Ä–æ–µ–∫—Ç"
            },
            {
              "name": "strings.area",
              "value": "–û–±–ª–∞—Å—Ç—å"
            },
            {
              "name": "dbs.projects",
              "value": "03a990b2fcba48219c0467d78ae7c2e5"
            },
            {
              "name": "api",
              "value": "https://api.notion.com/v1"
            },
            {
              "name": "strings.deadline",
              "value": "–î–µ–¥–ª–∞–π–Ω"
            },
            {
              "name": "strings.template",
              "value": "–®–∞–±–ª–æ–Ω"
            },
            {
              "name": "strings.status",
              "value": "–°—Ç–∞—Ç—É—Å"
            },
            {
              "name": "strings.statuses.done",
              "value": "–°–¥–µ–ª–∞–Ω–æ üôå"
            },
            {
              "name": "strings.statuses.cancelled",
              "value": "–û—Ç–º–µ–Ω–µ–Ω–æ"
            },
            {
              "name": "strings.statuses.notDone",
              "value": "–ù–µ —Å–¥–µ–ª–∞–Ω–æ"
            },
            {
              "name": "strings.statuses.paused",
              "value": "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            }
          ]
        },
        "options": {}
      },
      "id": "973f916d-c72a-40d9-9c5e-35af6a36c4b0",
      "name": "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -300,
        -180
      ]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": 4
            }
          ]
        }
      },
      "id": "3a679352-70f8-479f-a6e3-a77e625ded32",
      "name": "–í—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -500,
        -260
      ]
    },
    {
      "parameters": {},
      "id": "9fe703e3-d76f-467e-bec3-126dbd76bece",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        100,
        -180
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "requestMethod": "POST",
        "url": "={{$json.api}}/databases/{{$json.dbs.templates}}/query",
        "jsonParameters": true,
        "options": {},
        "headerParametersJson": "={\n \"Notion-Version\": \"{{$json.apiVersion}}\"\n}"
      },
      "id": "588aaeda-d1cd-4e82-8749-4aeb337e1aa5",
      "name": "–ß—Ç–æ —Ç–∞–º –ø–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –∑–∞–¥–∞—á–∞–º?",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -100,
        -80
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "requestMethod": "POST",
        "url": "={{$json.api}}/databases/{{$json.dbs.tasklist}}/query",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={\n \"filter\": {\n \"and\": [\n {\n \"property\": \"{{$json.strings.template}}\",\n \"relation\": {\n \"is_not_empty\": true\n }\n },\n {\n \"property\": \"{{$json.strings.status}}\",\n \"select\": {\n \"does_not_equal\": \"{{$json.strings.statuses.done}}\"\n }\n }\n ]\n }\n }",
        "headerParametersJson": "={{ { \"Notion-Version\":$json.apiVersion } }}"
      },
      "id": "4d3c8bcb-37be-444d-b7c7-90ee6f0e6bca",
      "name": "–ß—Ç–æ —Ç–∞–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á?",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -100,
        -280
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Code here will run only once, no matter how many input items there are.\n// More info and help: https://docs.n8n.io/nodes/n8n-nodes-base.function\n// Tip: You can use luxon for dates and $jmespath for querying JSON structures\n\nconst parseFrequency = tokens => {\n  const numbers = new Map();\n  numbers.set(\"–æ–¥–∏–Ω\", 1);\n  numbers.set(\"–æ–¥–Ω—É\", 1);\n  numbers.set(\"–¥–≤–∞\", 2);\n  numbers.set(\"–¥–≤–µ\", 2)\n  numbers.set(\"—Ç—Ä–∏\", 3);\n  numbers.set(\"—á–µ—Ç—ã—Ä–µ\", 4);\n  numbers.set(\"–ø—è—Ç—å\", 5);\n  numbers.set(\"—à–µ—Å—Ç—å\", 6);\n  numbers.set(\"—Å–µ–º—å\", 7);\n  numbers.set(\"–≤–æ—Å–µ–º—å\", 8);\n  numbers.set(\"–¥–µ–≤—è—Ç—å\", 9);\n  numbers.set(\"–¥–µ—Å—è—Ç—å\", 10);\n  numbers.set(\"–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å\", 11);\n  numbers.set(\"–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å\", 12);\n  const units = new Map()\n  units.set(\"–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥\", \"milliseconds\");\n  units.set(\"—Å–µ–∫—É–Ω–¥\", \"seconds\");\n  units.set(\"–º–∏–Ω—É—Ç\", \"minutes\");\n  units.set(\"—á–∞—Å\", \"hours\");\n  units.set(\"–¥–µ–Ω—å\", \"days\");\n  units.set(\"–¥–Ω—è\", \"days\");\n  units.set(\"–Ω–µ–¥–µ–ª\", \"weeks\");\n  units.set(\"–º–µ—Å—è—Ü\", \"months\");\n  units.set(\"–∫–≤–∞—Ä—Ç–∞–ª\", \"quarters\");\n  units.set(\"–≥–æ–¥\", \"years\");\n  units.set(\"–ª–µ—Ç\", \"years\");\n  let number = 1;\n  let unit = undefined;\n\n  for(let i = 0; i < tokens.length; i++) {\n    if (Number.isInteger(Number.parseInt(tokens[i]))) {\n      number = tokens[i];\n      continue;\n    };\n    if (numbers.has(tokens[i])) {\n      number = numbers.get(tokens[i]);\n      continue;\n    };\n    for(let i2 = tokens[i].length; i2 > 0; i2--) {\n      if (units.has(tokens[i].slice(0, i2))) {\n        unit = units.get(tokens[i].slice(0, i2))\n        break;\n      }\n    }\n  };\n  const ret = {};\n  ret[unit] = number;\n  return ret;\n};\n\nconst getFrequency = humanReadable => {\n  const tokens = humanReadable.split(\" \").map(token => token.toLowerCase());\n  if (tokens[0] === \"—Ä–∞–∑\" && tokens[1] === \"–≤\") {\n    return parseFrequency(tokens.slice(2));\n  }\n  if (tokens[0].slice(0, 4) === \"–∫–∞–∂–¥\") {\n    return parseFrequency(tokens.slice(1));\n  }\n};\n\n  const tasks = items[0].json.results.map(task => {\n    const fieldNames = $node[\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\"].json.strings;\n    let lastExec;\n    if (task.properties[fieldNames.lastExec]) {\n      lastExec = DateTime.fromFormat(task.properties[fieldNames.lastExec].date.start, \"yyyy-MM-dd\", {zone: 'utc'});\n    }\n    const frequency = getFrequency(task.properties[fieldNames.frequency].select.name);\n    // const nextExec = lastExec ? : DateTime.now();\n    // return {\n    //   id: task.id,\n    //   lastExecution: lastExec,\n    //   nextExecution: \n    // };\n    return lastExec;\n  });\nreturn { frequency: tasks };"
      },
      "id": "82e137fb-e3ee-433e-bfcf-56b31e352163",
      "name": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        300,
        -180
      ]
    }
  ],
  "connections": {
    "–ù–∞—á–∞–ª–æ (–æ–Ω –∂–µ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)": {
      "main": [
        [
          {
            "node": "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è": {
      "main": [
        [
          {
            "node": "–ß—Ç–æ —Ç–∞–º –ø–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –∑–∞–¥–∞—á–∞–º?",
            "type": "main",
            "index": 0
          },
          {
            "node": "–ß—Ç–æ —Ç–∞–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–í—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å": {
      "main": [
        [
          {
            "node": "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ß—Ç–æ —Ç–∞–º –ø–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –∑–∞–¥–∞—á–∞–º?": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "–ß—Ç–æ —Ç–∞–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á?": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-09-16T07:48:14.142Z",
  "updatedAt": "2022-09-17T06:55:10.479Z",
  "settings": {},
  "staticData": null,
  "pinData": {},
  "tags": []
}