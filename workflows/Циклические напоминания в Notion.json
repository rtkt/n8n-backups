{
  "createdAt": "2022-09-16T07:48:14.142Z",
  "updatedAt": "2023-03-12T10:57:42.000Z",
  "id": "3",
  "name": "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Notion",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "apiVersion",
              "value": "2022-06-28"
            },
            {
              "name": "strings.lastExec",
              "value": "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
            },
            {
              "name": "strings.frequency",
              "value": "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å"
            },
            {
              "name": "dbs.templates",
              "value": "9bfcafdd-2c04-4073-924e-b32bfa7671d9"
            },
            {
              "name": "dbs.tasklist",
              "value": "cf149754-de19-4c6c-be23-a1eb821c30ca"
            },
            {
              "name": "strings.plannedTime",
              "value": "–í—Ä–µ–º—è"
            },
            {
              "name": "strings.taskName",
              "value": "–ò–º—è"
            },
            {
              "name": "strings.effort",
              "value": "–£—Å–∏–ª–∏–µ"
            },
            {
              "name": "strings.value",
              "value": "–ó–Ω–∞—á–µ–Ω–∏–µ"
            },
            {
              "name": "strings.project",
              "value": "–ü—Ä–æ–µ–∫—Ç"
            },
            {
              "name": "strings.area",
              "value": "–û–±–ª–∞—Å—Ç—å"
            },
            {
              "name": "dbs.projects",
              "value": "03a990b2-fcba-4821-9c04-67d78ae7c2e5"
            },
            {
              "name": "strings.deadline",
              "value": "–î–µ–¥–ª–∞–π–Ω"
            },
            {
              "name": "strings.template",
              "value": "–®–∞–±–ª–æ–Ω"
            },
            {
              "name": "strings.status",
              "value": "–°—Ç–∞—Ç—É—Å"
            },
            {
              "name": "strings.statuses.done",
              "value": "–°–¥–µ–ª–∞–Ω–æ üôå"
            },
            {
              "name": "strings.statuses.cancelled",
              "value": "–û—Ç–º–µ–Ω–µ–Ω–æ"
            },
            {
              "name": "strings.statuses.notDone",
              "value": "–ù–µ —Å–¥–µ–ª–∞–Ω–æ"
            },
            {
              "name": "strings.statuses.paused",
              "value": "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            },
            {
              "name": "strings.priority.high",
              "value": "–í—ã—Å–æ–∫–æ–µ"
            },
            {
              "name": "strings.priority.medium",
              "value": "–°—Ä–µ–¥–Ω–µ–µ"
            },
            {
              "name": "strings.priority.low",
              "value": "–ù–∏–∑–∫–æ–µ"
            },
            {
              "name": "strings.postponable",
              "value": "–ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ–µ?"
            },
            {
              "name": "strings.creationDate",
              "value": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
            }
          ]
        },
        "options": {}
      },
      "id": "973f916d-c72a-40d9-9c5e-35af6a36c4b0",
      "name": "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -300,
        -320
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "requestMethod": "POST",
        "url": "=https://api.notion.com/v1/databases/{{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.dbs.tasklist }}/query",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={\n  \"filter\": {\n    \"and\": [\n      {\n        \"property\": \"{{$(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings.template}}\",\n        \"relation\": {\n          \"contains\": \"{{ $json[\"id\"] }}\"\n        }\n      },\n      {\n        \"property\": \"{{$(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings.creationDate}}\",\n        \"date\": {\n          \"on_or_after\": \"{{ $json[\"properties\"][$(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings.lastExec][\"date\"][\"start\"] }}\"\n        }\n      }\n    ]\n  }\n}",
        "headerParametersJson": "={\n\"Notion-Version\": \"{{$(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.apiVersion}}\"\n}"
      },
      "id": "52263ba6-85dd-45e5-bf09-a5c1031211b6",
      "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -100,
        -740
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json[\"properties\"][$(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings.lastExec][\"date\"][\"start\"] }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "490fe2ca-86d7-4cb2-a293-d5af547a4966",
      "name": "–ó–∞–¥–∞—á–∞ —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -360,
        -620
      ]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "requestMethod": "POST",
        "url": "=https://api.notion.com/v1/databases/{{$json.dbs.templates.replaceAll('-', '')}}/query",
        "options": {},
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Notion-Version",
              "value": "={{ $json[\"apiVersion\"] }}"
            }
          ]
        }
      },
      "id": "588aaeda-d1cd-4e82-8749-4aeb337e1aa5",
      "name": "–ß—Ç–æ —Ç–∞–º –ø–æ —à–∞–±–ª–æ–Ω–∞–º?",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        -80,
        -320
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyHour"
            }
          ]
        }
      },
      "id": "3a679352-70f8-479f-a6e3-a77e625ded32",
      "name": "–í—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -500,
        -320
      ]
    },
    {
      "parameters": {
        "url": "=https://api.notion.com/v1/blocks/{{ $json[\"id\"].replaceAll('-', '') }}/children",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "={{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.apiVersion }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f525706b-24b7-4984-b246-7dad9e85a491",
      "name": "–ü–æ–¥–≥—Ä—É–∑–∫–∞ –ø–æ—Ç–æ–º–∫–æ–≤",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -500,
        -100
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.has_children }}",
              "value2": true
            }
          ]
        }
      },
      "id": "1a154d29-b613-4cc6-9835-254a1a14e8ce",
      "name": "–£ –±–ª–æ–∫–∞ –µ—Å—Ç—å –ø–æ—Ç–æ–º–∫–∏?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        440,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "let finishedLoading = false;\nitems.forEach(block => {\n  if (block.json.has_children) {\n    finishedLoading = true;\n  };\n})\nfinishedLoading = ! finishedLoading;\nreturn { json: { finishedLoading: finishedLoading } };"
      },
      "id": "3a82122b-3c51-4f65-b6b3-d5ffc249bc94",
      "name": "–£–ø–ª–æ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        960,
        540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json[\"finishedLoading\"] }}",
              "value2": true
            }
          ]
        }
      },
      "id": "320c4db7-2962-4b22-a2ab-f7d1c65faa0e",
      "name": "–ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1140,
        540
      ]
    },
    {
      "parameters": {
        "jsCode": "const mergedBlocks = [];\nfor(let i = 0; true; i++) {\n  try {\n    const items = $items(\"–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏\", 0, i).map(block => block.json);\n    mergedBlocks.push.apply(mergedBlocks, items);\n    console.log($items(\"–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏\", 0, i));\n  } catch (error) {\n    return [{json: {mergedBlocks}}];\n  }\n}"
      },
      "id": "d6991c5a-b5d8-4e0a-b55d-28b9367517f2",
      "name": "–û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–º–∫–∏",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        540
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "mergedBlocks",
        "options": {}
      },
      "id": "13cf6dc7-c40d-4e39-8a85-5a5f826386a2",
      "name": "–ï—â—ë —Ä–∞–∑ —Ä–∞–∑–±–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ —á–∞—Å—Ç–∏",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 2,
      "position": [
        1520,
        540
      ]
    },
    {
      "parameters": {
        "jsCode": "const processedBlocks = [];\nconst data = [];\nitems.forEach(block => {\n  if (block.json.parent.type === \"page_id\") {\n    processedBlocks.push(block.json.id)\n    data.push(JSON.parse(JSON.stringify(block.json)))\n  }\n});\n\nconsole.log(`Processed blocks IDs are ${processedBlocks}`);\nreturn data;"
      },
      "id": "4414a203-b7c6-4ed3-8724-79e5a3d774cd",
      "name": "–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –≤–æ–µ–¥–∏–Ω–æ",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1740,
        540
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "results",
        "options": {}
      },
      "id": "09767a55-c116-4444-a830-83015ea3c9ee",
      "name": "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 2,
      "position": [
        140,
        -320
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const page = $input.item.json;\ndelete page.url;\ndelete page.created_time;\ndelete page.last_edited_time;\ndelete page.last_edited_by;\ndelete page.created_by;\nfor (const property in page.properties) {\n  const ptr = page.properties[property];\n  delete ptr.id;\n  if (ptr.type === \"select\" &&\n      ptr.select &&\n      ptr.select.id) {\n    delete ptr.select.id;\n    delete ptr.select.color;\n  }\n  if (ptr.type === \"multi_select\" && ptr.multi_select.length) {\n    ptr.multi_select.forEach(tag => {\n      delete tag.id;\n      delete tag.color;\n    })\n  }\n}\nreturn $input.item;"
      },
      "id": "5d5c9fdf-66be-4449-97ad-de28e3443bd7",
      "name": "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -540,
        -620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.results.length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "id": "e4bf1fe4-ea9a-4663-b042-bc362420abb3",
      "name": "–ß—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞—à–ª–æ—Å—å?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        100,
        -740
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.results.length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "id": "cf7a5485-c868-41b0-bdae-d85e058379eb",
      "name": "–ù–∞—à–ª–∏—Å—å –ø–æ—Ç–æ–º–∫–∏?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -260,
        -100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return $('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü').item;"
      },
      "id": "6ef48fea-0d37-4121-aa3d-2b03f6a5c143",
      "name": "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —à–∞–±–ª–æ–Ω",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1360,
        -620
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const output = $input.item.json.results.reduce((previous, current) => {\n  const prevDate = DateTime.fromISO(previous.properties[$('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.creationDate].created_time);\n  const currDate = DateTime.fromISO(current.properties[$('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.creationDate].created_time);\n  return currDate.diff(prevDate).toMillis() > 0 ? current : previous\n});\nreturn { json: output };"
      },
      "id": "b38b0cf6-3ef4-4d8b-a276-764ef7ccbadf",
      "name": "–ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã—á–ª–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        300,
        -820
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json[\"properties\"][\"–°—Ç–∞—Ç—É—Å\"][\"select\"][\"name\"] }}",
              "value2": "={{ $('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.statuses.done }}"
            },
            {
              "value1": "={{ $json[\"properties\"][\"–°—Ç–∞—Ç—É—Å\"][\"select\"][\"name\"] }}",
              "value2": "={{ $('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.statuses.cancelled }}"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "699dc90e-8561-4d50-93a8-28c9d2acfefe",
      "name": "–û–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        480,
        -820
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $('–ó–∞–¥–∞—á–∞ —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å?').item.json.properties[$('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.postponable].checkbox }}",
              "value2": true
            }
          ]
        }
      },
      "id": "245f7558-a42b-4791-b9ce-938dada5eec3",
      "name": "–í —à–∞–±–ª–æ–Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        -1060
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return { json: { lastEdit: DateTime.fromISO($input.item.json.last_edited_time).setZone('UTC+7').toISO() } }"
      },
      "id": "8f4f9118-6ef2-4a36-b4c3-cb956d2ed4da",
      "name": "–ö–æ–≥–¥–∞ —Ç–∞–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ?",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        900,
        -1060
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.notion.com/v1/pages/{{ $(\"–ó–∞–¥–∞—á–∞ —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å?\").item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "={{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.apiVersion }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"properties\": {\n    \"{{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings.lastExec }}\": {\n      \"date\": {\n        \"start\": \"{{ $json.lastEdit }}\"\n      }\n    }\n  }\n}",
        "options": {}
      },
      "id": "35a4b899-7a06-46a2-8932-87c7cbd94e13",
      "name": "–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –¥–∞—Ç—É –≤ —à–∞–±–ª–æ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1120,
        -1060
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const page = $input.item.json;\nconsole.log(page);\ndelete page.url;\ndelete page.created_time;\ndelete page.last_edited_time;\ndelete page.last_edited_by;\ndelete page.created_by;\npage.parent.database_id = $('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.dbs.tasklist;\nfor (const property in page.properties) {\n  const ptr = page.properties[property];\n  delete ptr.id;\n  if (ptr.type === \"select\" &&\n      ptr.select &&\n      ptr.select.id) {\n    delete ptr.select.id;\n    delete ptr.select.color;\n  }\n  if (ptr.type === \"multi_select\" && ptr.multi_select.length) {\n    ptr.multi_select.forEach(tag => {\n      delete tag.id;\n      delete tag.color;\n    })\n  }\n}\nreturn $input.item;"
      },
      "id": "1e3f117a-6b66-4e7c-9b15-486d21b0d47d",
      "name": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1360,
        -820
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $('–ó–∞–¥–∞—á–∞ —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å?').item.json.properties[$('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.postponable].checkbox }}",
              "value2": true
            }
          ]
        }
      },
      "id": "63124ca4-5079-48dd-a9a2-5571a2ed4518",
      "name": "–ê –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        -840
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.notion.com/v1/pages/{{ $json[\"id\"].replaceAll('-', '') }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "={{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.apiVersion}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"properties\": {\n    \"{{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings.lastExec }}\": {\n      \"date\": {\n        \"start\": \"{{ DateTime.now().toISO() }}\"\n      }\n    }\n  }\n}",
        "options": {}
      },
      "id": "3af546ef-8bf7-4dab-9245-700237e28d5a",
      "name": "–û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -100,
        -520
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {},
      "id": "9d826bdf-2596-48d1-81f3-84bbe3cd36e4",
      "name": "–ó–∞–±–∏–≤–∞–µ–º",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        900,
        -880
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const parseFrequency = (tokens) => {\n  const numbers = new Map()\n  numbers.set('–æ–¥–∏–Ω', 1)\n  numbers.set('–æ–¥–Ω—É', 1)\n  numbers.set('–¥–≤–∞', 2)\n  numbers.set('–¥–≤–µ', 2)\n  numbers.set('–≤—Ç–æ—Ä–æ–π', 2)\n  numbers.set('—Ç—Ä–∏', 3)\n  numbers.set('—Ç—Ä–µ—Ç–∏–π', 3)\n  numbers.set('—á–µ—Ç—ã—Ä–µ', 4)\n  numbers.set('—á–µ—Ç–≤—ë—Ä—Ç—ã–π', 4)\n  numbers.set('–ø—è—Ç—å', 5)\n  numbers.set('–ø—è—Ç—ã–π', 5)\n  numbers.set('—à–µ—Å—Ç—å', 6)\n  numbers.set('—à–µ—Å—Ç–æ–π', 6)\n  numbers.set('—Å–µ–º—å', 7)\n  numbers.set('—Å–µ–¥—å–º–æ–π', 7)\n  numbers.set('–≤–æ—Å–µ–º—å', 8)\n  numbers.set('–≤–æ—Å—å–º–æ–π', 8)\n  numbers.set('–¥–µ–≤—è—Ç—å', 9)\n  numbers.set('–¥–µ–≤—è—Ç—ã–π', 9)\n  numbers.set('–¥–µ—Å—è—Ç—å', 10)\n  numbers.set('–¥–µ—Å—è—Ç—ã–π', 10)\n  numbers.set('–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', 11)\n  numbers.set('–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', 12)\n  const units = new Map()\n  units.set('–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥', 'milliseconds')\n  units.set('—Å–µ–∫—É–Ω–¥', 'seconds')\n  units.set('–º–∏–Ω—É—Ç', 'minutes')\n  units.set('—á–∞—Å', 'hours')\n  units.set('–¥–µ–Ω—å', 'days')\n  units.set('–¥–Ω–µ–π', 'days')\n  units.set('–¥–Ω—è', 'days')\n  units.set('–Ω–µ–¥–µ–ª', 'weeks')\n  units.set('–º–µ—Å—è—Ü', 'months')\n  units.set('–∫–≤–∞—Ä—Ç–∞–ª', 'quarters')\n  units.set('–≥–æ–¥', 'years')\n  units.set('–ª–µ—Ç', 'years')\n  let number = 1;\n  let unit\n\n  for (let i = 0; i < tokens.length; i++) {\n    if (Number.isInteger(Number.parseInt(tokens[i]))) {\n      number = tokens[i]\n      continue\n    }\n    if (numbers.has(tokens[i])) {\n      number = numbers.get(tokens[i])\n      continue\n    }\n    for (let i2 = tokens[i].length; i2 > 0; i2--) {\n      if (units.has(tokens[i].slice(0, i2))) {\n        unit = units.get(tokens[i].slice(0, i2))\n        break\n      }\n    }\n  }\n  if (!unit || !number) throw new Error(\"Couldn't parse the frequency string\")\n  const ret = {}\n  ret[unit] = number\n  return ret\n}\n\nconst getFrequency = (humanReadable) => {\n  const tokens = humanReadable.split(' ').map((token) => token.toLowerCase())\n  if (tokens[0] === '—Ä–∞–∑' && tokens[1] === '–≤') {\n    return parseFrequency(tokens.slice(2))\n  }\n  if (tokens[0].slice(0, 4) === '–∫–∞–∂–¥') {\n    return parseFrequency(tokens.slice(1))\n  }\n}\n\nconst fieldNames = $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings\nconst frequency = getFrequency(\n  $input.item.json.properties[fieldNames.frequency].select.name\n)\n$input.item.json.frequency = frequency;\nreturn $input.item;"
      },
      "id": "09bf471e-4027-408f-9c2d-853119680052",
      "name": "–ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–∞–±–ª–æ–Ω",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1620,
        -720
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const nextExecCoarse = DateTime.fromISO($input.item.json.properties[$('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.lastExec].date.start).plus($input.item.json.frequency);\nconst timeString = $input.item.json.properties[$('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.strings.plannedTime].rich_text[0].plain_text;\nconst plannedTime = {\n  hour: timeString.substring(0,2),\n  minute: timeString.substring(3,5)\n}\n$input.item.json.nextExec = nextExecCoarse.set(plannedTime);;\nreturn $input.item;"
      },
      "id": "59f6537d-bd79-4a2e-96d0-4501af6f57bd",
      "name": "–ö–æ–≥–¥–∞ —Ç–∞–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1840,
        -560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ DateTime.now().toISODate() }}",
              "value2": "={{ DateTime.fromISO($json.nextExec).toISODate() }}"
            }
          ],
          "dateTime": [
            {
              "value1": "={{ DateTime.now().toISODate() }}",
              "value2": "={{ DateTime.fromISO($json.nextExec).toISODate() }}"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "f920286e-2cf5-42de-b9cf-bedf266077b1",
      "name": "–í—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏—à–ª–æ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        400,
        -320
      ]
    },
    {
      "parameters": {},
      "id": "8721ad53-b523-49ff-b554-550a387db858",
      "name": "–û–ø—è—Ç—å –∑–∞–±–∏–≤–∞–µ–º",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        680,
        -560
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const props = $input.item.json.properties;\nconst strings = $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.strings;\nprops[strings.template] = {\n  type: \"relation\",\n  relation: [\n    { id: $input.item.json.id }\n  ]\n};\nprops[strings.deadline] = {\n  type: \"date\",\n  date: {\n    start: $input.item.json.nextExec\n  }\n};\nprops[strings.status] = {\n  type: \"select\",\n  select: {\n    name: strings.statuses.notDone\n  }\n};\n$input.item.json.parent.database_id = $('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è').all()[0].json.dbs.tasklist;\n\ndelete $input.item.json.id;\ndelete $input.item.json.frequency;\ndelete $input.item.json.nextExec;\ndelete props[strings.postponable];\ndelete props[strings.lastExec];\ndelete props[strings.frequency];\ndelete props[strings.plannedTime];\n\nreturn $input.item;"
      },
      "id": "7bbd9f12-e597-48c1-ae0d-f262889d4872",
      "name": "–§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        620,
        -340
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/pages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "={{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.apiVersion }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "525dcdea-8276-42c0-b654-dfca8b4c53be",
      "name": "–ò —Å–æ–∑–¥–∞—ë–º –µ—ë",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        820,
        -340
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const template = $('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü').item;\ntemplate.json.current_task_id = $input.item.json.id;\nreturn template;"
      },
      "id": "00dd4cfc-743a-42df-9788-fa8c5de0770e",
      "name": "–°–Ω–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω, –Ω–æ —É–∫–∞–∑–∞–≤ ID –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1040,
        -340
      ]
    },
    {
      "parameters": {},
      "id": "4506502a-88a1-4cbc-904f-7994bc786bf6",
      "name": "–ò —Å–Ω–æ–≤–∞ –∑–∞–±–∏–≤–∞–µ–º",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -40,
        80
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const block = $input.item.json;\ndelete block.created_time;\ndelete block.last_edited_time;\ndelete block.created_by;\ndelete block.last_edited_by;\n\nreturn $input.item;"
      },
      "id": "f5a9068a-e779-4126-8169-5458de3765df",
      "name": "–ó–∞—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        200,
        -100
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "results",
        "options": {}
      },
      "id": "c58bf7cd-3f1e-4fee-a215-9dd264b68099",
      "name": "–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 2,
      "position": [
        -40,
        -100
      ]
    },
    {
      "parameters": {
        "jsCode": "const ids = [];\nconst children = $input.all().map(block => {\n  const ret = block.json;\n  ids.push(ret.id);\n  delete ret.id;\n  return ret;\n});\nreturn { json: { children, ids } };"
      },
      "id": "00aec5a1-39d2-4726-85bc-bce9d092a256",
      "name": "–ì–æ—Ç–æ–≤–∏–º JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1240,
        -100
      ]
    },
    {
      "parameters": {},
      "id": "e8fec483-3071-47a5-9d06-6e466c69591f",
      "name": "–ò –æ–ø—è—Ç—å –∑–∞–±–∏–≤–∞–µ–º",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        200,
        80
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json[\"parent\"][\"type\"] }}",
              "value2": "page_id"
            }
          ]
        }
      },
      "id": "b834349e-688c-4769-822f-e5a4f71a95a0",
      "name": "–≠—Ç–æ –ø—Ä—è–º–æ–π –ø–æ—Ç–æ–º–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        700,
        -100
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "parent.page_id",
              "value": "={{ $(\"–ò —Å–æ–∑–¥–∞—ë–º –µ—ë\").item.json[\"id\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b12df8cd-7e9f-4d1b-a75a-7c1a1214d013",
      "name": "–ü–æ–¥–º–µ–Ω—è–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—è",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        980,
        -100
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.notion.com/v1/blocks/{{ $json.children[0].parent.page_id.replaceAll('-', '') }}/children",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "={{ $(\"–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\").all()[0].json.apiVersion }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"children\": {{ JSON.stringify($json.children)}}\n}",
        "options": {}
      },
      "id": "555cdd1e-f859-4f69-9788-1276a27a2bc7",
      "name": "–ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1460,
        -100
      ],
      "credentials": {
        "notionApi": {
          "id": "4",
          "name": "Notion"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {}
          ]
        },
        "options": {}
      },
      "id": "6d3fba65-5f04-4411-bd3e-7e1a9ff92b2a",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        180,
        560
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "results",
        "options": {}
      },
      "id": "329412b3-faf9-4fab-ab35-f9df45f4766c",
      "name": "–†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±–ª–æ–∫–∏",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 2,
      "position": [
        1680,
        -100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const block = $input.item.json;\nconst id = block.id;\ndelete block.created_time;\ndelete block.last_edited_time;\ndelete block.created_by;\ndelete block.last_edited_by;\ndelete block.id;\ndelete block.parent;\ndelete block.has_children;\n\nreturn { json: { block }}; //, id: id } };"
      },
      "id": "d7763fac-f8ca-495f-8cb8-de57a16413d5",
      "name": "–ó–∞—á–∏—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç API –æ—Ç–≤–µ—Ç",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1880,
        -100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const block = $input.item.json;\nconst id = block.id;\ndelete block.created_time;\ndelete block.last_edited_time;\ndelete block.created_by;\ndelete block.last_edited_by;\ndelete block.id;\ndelete block.parent;\ndelete block.has_children;\n\nreturn { json: { block }}; //, id: id } };"
      },
      "id": "416fbc4d-c5bd-4074-a5a5-ecc20fd6b5ab",
      "name": "–ï—â—ë –Ω–µ–º–Ω–æ–≥–æ –∑–∞—á–∏—â–∞–µ–º –±–ª–æ–∫",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        700,
        100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "console.log($('–†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±–ª–æ–∫–∏').item.json);"
      },
      "id": "6e2d47de-74d7-4035-a848-3e376af42c95",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1240,
        100
      ]
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "block",
              "field2": "block"
            }
          ]
        },
        "resolve": "preferInput1",
        "options": {}
      },
      "id": "052bbbc0-224b-4ac5-aa90-153bb0f7f749",
      "name": "–ò—â–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª–æ–∫–∏",
      "type": "n8n-nodes-base.compareDatasets",
      "typeVersion": 2,
      "position": [
        1020,
        100
      ]
    }
  ],
  "connections": {
    "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è": {
      "main": [
        [
          {
            "node": "–ß—Ç–æ —Ç–∞–º –ø–æ —à–∞–±–ª–æ–Ω–∞–º?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ó–∞–¥–∞—á–∞ —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å?": {
      "main": [
        [
          {
            "node": "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ß—Ç–æ —Ç–∞–º –ø–æ —à–∞–±–ª–æ–Ω–∞–º?": {
      "main": [
        [
          {
            "node": "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–í—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å": {
      "main": [
        [
          {
            "node": "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–£–ø–ª–æ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤": {
      "main": [
        [
          {
            "node": "–ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤?": {
      "main": [
        [
          {
            "node": "–û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–º–∫–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–º–∫–∏": {
      "main": [
        [
          {
            "node": "–ï—â—ë —Ä–∞–∑ —Ä–∞–∑–±–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ —á–∞—Å—Ç–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ï—â—ë —Ä–∞–∑ —Ä–∞–∑–±–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ —á–∞—Å—Ç–∏": {
      "main": [
        [
          {
            "node": "–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –≤–æ–µ–¥–∏–Ω–æ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü": {
      "main": [
        [
          {
            "node": "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü": {
      "main": [
        [
          {
            "node": "–ó–∞–¥–∞—á–∞ —Ä–∞–Ω–µ–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É": {
      "main": [
        [
          {
            "node": "–ß—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞—à–ª–æ—Å—å?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ù–∞—à–ª–∏—Å—å –ø–æ—Ç–æ–º–∫–∏?": {
      "main": [
        [
          {
            "node": "–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–ò —Å–Ω–æ–≤–∞ –∑–∞–±–∏–≤–∞–µ–º",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ß—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞—à–ª–æ—Å—å?": {
      "main": [
        [
          {
            "node": "–ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã—á–ª–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã—á–ª–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É": {
      "main": [
        [
          {
            "node": "–û–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞?": {
      "main": [
        [
          {
            "node": "–í —à–∞–±–ª–æ–Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–ê –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–í —à–∞–±–ª–æ–Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å?": {
      "main": [
        [
          {
            "node": "–ö–æ–≥–¥–∞ —Ç–∞–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ö–æ–≥–¥–∞ —Ç–∞–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ?": {
      "main": [
        [
          {
            "node": "–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –¥–∞—Ç—É –≤ —à–∞–±–ª–æ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –¥–∞—Ç—É –≤ —à–∞–±–ª–æ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞": {
      "main": [
        [
          {
            "node": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ê –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞?": {
      "main": [
        [
          {
            "node": "–ó–∞–±–∏–≤–∞–µ–º",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω": {
      "main": [
        [
          {
            "node": "–ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —à–∞–±–ª–æ–Ω": {
      "main": [
        [
          {
            "node": "–ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω": {
      "main": [
        [
          {
            "node": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–∞—Ä—Å–∏–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–∞–±–ª–æ–Ω": {
      "main": [
        [
          {
            "node": "–ö–æ–≥–¥–∞ —Ç–∞–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ö–æ–≥–¥–∞ —Ç–∞–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?": {
      "main": [
        [
          {
            "node": "–í—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏—à–ª–æ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–í—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏—à–ª–æ?": {
      "main": [
        [
          {
            "node": "–§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–û–ø—è—Ç—å –∑–∞–±–∏–≤–∞–µ–º",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å": {
      "main": [
        [
          {
            "node": "–ò —Å–æ–∑–¥–∞—ë–º –µ—ë",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ò —Å–æ–∑–¥–∞—ë–º –µ—ë": {
      "main": [
        [
          {
            "node": "–°–Ω–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω, –Ω–æ —É–∫–∞–∑–∞–≤ ID –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–°–Ω–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω, –Ω–æ —É–∫–∞–∑–∞–≤ ID –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏": {
      "main": [
        [
          {
            "node": "–ü–æ–¥–≥—Ä—É–∑–∫–∞ –ø–æ—Ç–æ–º–∫–æ–≤",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏": {
      "main": [
        [
          {
            "node": "–ó–∞—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ó–∞—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API": {
      "main": [
        [
          {
            "node": "–≠—Ç–æ –ø—Ä—è–º–æ–π –ø–æ—Ç–æ–º–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã?",
            "type": "main",
            "index": 0
          },
          {
            "node": "–£ –±–ª–æ–∫–∞ –µ—Å—Ç—å –ø–æ—Ç–æ–º–∫–∏?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–£ –±–ª–æ–∫–∞ –µ—Å—Ç—å –ø–æ—Ç–æ–º–∫–∏?": {
      "main": [
        [
          {
            "node": "–ï—â—ë –Ω–µ–º–Ω–æ–≥–æ –∑–∞—á–∏—â–∞–µ–º –±–ª–æ–∫",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–ò –æ–ø—è—Ç—å –∑–∞–±–∏–≤–∞–µ–º",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–¥–≥—Ä—É–∑–∫–∞ –ø–æ—Ç–æ–º–∫–æ–≤": {
      "main": [
        [
          {
            "node": "–ù–∞—à–ª–∏—Å—å –ø–æ—Ç–æ–º–∫–∏?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–≠—Ç–æ –ø—Ä—è–º–æ–π –ø–æ—Ç–æ–º–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã?": {
      "main": [
        [
          {
            "node": "–ü–æ–¥–º–µ–Ω—è–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—è",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–¥–º–µ–Ω—è–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—è": {
      "main": [
        [
          {
            "node": "–ì–æ—Ç–æ–≤–∏–º JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ì–æ—Ç–æ–≤–∏–º JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API": {
      "main": [
        [
          {
            "node": "–ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ": {
      "main": [
        [
          {
            "node": "–†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±–ª–æ–∫–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±–ª–æ–∫–∏": {
      "main": [
        [
          {
            "node": "–ó–∞—á–∏—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç API –æ—Ç–≤–µ—Ç",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ó–∞—á–∏—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç API –æ—Ç–≤–µ—Ç": {
      "main": [
        [
          {
            "node": "–ò—â–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª–æ–∫–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ï—â—ë –Ω–µ–º–Ω–æ–≥–æ –∑–∞—á–∏—â–∞–µ–º –±–ª–æ–∫": {
      "main": [
        [
          {
            "node": "–ò—â–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª–æ–∫–∏",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "–ò—â–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª–æ–∫–∏": {
      "main": [
        [],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "pinData": {},
  "versionId": "a4b54fab-d62a-4afe-bd0d-a8399bc097ff",
  "triggerCount": 0,
  "tags": []
}